/* GUIA DE BANCO DE DADOS E SQL SERVER 2019*/

--DELIMITER = NÃO POSSUI, PORÉM TEM UM COMANDO DE SEPARAÇÃO DE CODIGOS CHAMADO DE GO--

--COMANDOS UTEIS--

/*

1.
SP_COLUMNS TABELA_NOME = DESC(DESCRIÇÃO DA ESTRUTURA DE UMA TABELA)

OU MAIS COMPLETO EM:

SP_HELP TABELA_NOME(COM CONSTRAINTS, REGRAS, E ETC)

SP_TABLES = SHOW TABLES(VER TABELAS DO BANCO CONECTADO)

SP_DATABASES = SHOW DATABASES(VER OS BANCOS DE DADOS)

SP_RENAME = RENOMER COLUNA DE UMA TABELA JÁ EXISTENTE

EXEC SP_RENAME 'NomeTabela.[nomeCampo]', 'NovoNomeCampo', 'column'

SP_HELPTEXT TRIGGER_NAME OR PROCEDURE_NAME = VER INSTRUÇÃO COMPLETA DA TRIGGER OU PROCEDIMENTO


2.
GETDATE() AS DATA_HORA_ATUAL

SUSER_NAME() AS USUARIO

3.
ISNULL(EMAIL, 'Não Possui') AS "E-MAIL" = SE FOR NULO

4.

DATEDIFF = CALCULA A DIFERENÇA ENTRE DUAS DATAS COM UM CALCULO DE IDADE PARA O DIA DE HOJE POR EXEMPLO

DATEDIFF(INTERVALO(DAY, WEEKDAY,MONTH,YEAR), DATA_INICIAL, DATA_FINAL)

EX: SELECT NOME, DATEDIFF(YEAR, NASCIMENTO, GETDATE()) AS IDADE

    SELECT DATEDIFF(YEAR,'25-04-2015',GETDATE())
    AS NASCIMENTO
    GO
    
=
 NASCIMENTO
-----------
7


5.

DATEADD = RETORNA A UMA DATA SOMANDO A OUTRA DATA, EXEMPLO CALCULAR DATA DE VALIDADE

DATEADD(INTERVALO, INCREMENTO( QUANT0S DIAS/MESES/ANOS?), DATA_INICIAL)

EX: SELECT ITENS, DATEADD(MONTH,3,GETDATE()) AS "DATA DE VALIDADE" = A PARTIR DE HOJE,
DAQUI A TRÊS MESES ESSES PRODUTOS IRÃO VENCER

6.

CAST() = FUNCÇÃO DE CONVERTER DADOS

EX:

SELECT '1' + '1' AS CONTA

=11

SELECT CAST('1' AS INT) + CAST('1' AS INT) AS CONTA

=2

7.

CHARINDEX = INDICE, ONDE A POSIÇÃO DA BUSCA QUE PODE SER QUALQUER COISA

CHARINDEX(O QUÊ?, ONDE?, A PARTIR DE?(NÃO SENDO OBRIGATORIO, ELA INICIA ALTOMATICAMENTE EM 1))
EX:

CREATE TABLE TESTE10(
           NOME VARCHAR(100),
		   SEXO VARCHAR(100),
		   TIPO_SANGUINEO CHAR(3)
)
GO

INSERT INTO TESTE10 VALUES('JOAO','MASCULINO','A+')
GO
INSERT INTO TESTE10 VALUES('THIAGO','MASCULINO','A-')
GO
INSERT INTO TESTE10 VALUES('JORGE','MASCULINO','O+')
GO
INSERT INTO TESTE10 VALUES('LUCAS','MASCULINO','A-')
GO
INSERT INTO TESTE10 VALUES('MARIO','MASCULINO','O-')
GO
INSERT INTO TESTE10 VALUES('KAIQUE','MASCULINO','O-')
GO

SELECT * FROM TESTE10
GO

ALTER TABLE TESTE10
ALTER COLUMN SEXO VARCHAR(10)

ALTER TABLE TESTE10
ALTER COLUMN NOME VARCHAR(10)

SELECT NOME, SEXO, TIPO_SANGUINEO,
       CHARINDEX('+',TIPO_SANGUINEO) AS POSITIVOS,
       CHARINDEX('-',TIPO_SANGUINEO) AS NEGATIVOS
FROM TESTE10
GO

NOME       SEXO       TIPO_SANGUINEO POSITIVOS   NEGATIVOS
---------- ---------- -------------- ----------- -----------
JOAO       MASCULINO  A+             2           0
THIAGO     MASCULINO  A-             0           2
JORGE      MASCULINO  O+             2           0
LUCAS      MASCULINO  A-             0           2
MARIO      MASCULINO  O-             0           2
KAIQUE     MASCULINO  O-             0           2


8.

TRIGGER = INSTRUÇÃO

CREATE TRIGGER NOME
ON TABELA
FOR AFTER/BEFORE UPDATE/INSERT/DELETE AS
IF (UPDATE/INSERT/DELETE)(COLUNA) -- PARA CASO QUEIRA QUE A TRIGGER SO FUNCIONE SE FOR NESSA COLUNA--
BEGIN
       DECLARE(VALORES NOVOS)

       SELECT(VALORES VINDOS DE OUTRAS TABELAS)

       SET(VALORES VINDOS DE FUNÇÕES)

       INSTRUÇÃO

       PRINT('TRIGGER EXECUTADA COM SUCESSO')
 END
 GO


 EX:

 CREATE TRIGGER ATT_PRECO
 ON PRODUTOS
 FOR UPDATE AS
 IF UDPATE(PRECO)
 BEGIN
          DECLARE 
          @IDPRODUTO INT,
          @PRODUTO VARCHAR(30),
          @PRECO_ANTIGO NUMERIC(10,2),
          @PRECO_NOVO NUMERIC(10,2),
          @DATA_MODIFICACAO DATETIME,
          @USUARIO VARCHAR(30)

          SELECT @IDPRODUTO = IDPRODUTO,
                 @PRODUTO = PRODUTO,
                 @PRECO_ANTIGO = PRECO FROM DELETED,
                 @PRECO_NOVO = PRECO FROM ÍNSERTED
	   FROM PRODUTOS
	   

          SET @DATA_MODIFICACAO = GETDATE()
          SET @USUARIO = SUSER_NAME()

          INSERT INTO HISTORICO VALUES(
          @IDPRODUTO,@PRODUTO,@PRECO_ANTIGO,@PRECO_NOVO,@DATA_MODIFICACAO,@USUARIO)

          PRINT('DADOS GUARDADOS NA TABELA DE HISTORICO')
 END
 GO
 
 --OUTRO EXEMPLO DE TRIGGER CRIANDO REGRA DE ERRO SE UM PROCESSO NAO FOR ATENDIDO--

CREATE TRIGGER TG_RANGE
ON SALARIO
FOR INSERT, UPDATE
AS
      DECLARE
	  @MIN NUMERIC(10,2),
	  @MAX NUMERIC(10,2),
	  @ATUAL NUMERIC(10,2)

	  SELECT @MIN = MINSALARIO,
	         @MAX = MAXSALARIO
	  FROM SALARIO_RANGE

	  SELECT @ATUAL = I.SALARIO
	  FROM INSERTED I

      IF(@ATUAL <= @MIN)
BEGIN
	     RAISERROR('SALARIO ABAIXO DO PERMITIDO',16,1) --NOME DO ERRO,CODIGO ALEATÓTIO,CODIGO ALEATÓTIO--
		 PRINT('OU SEJA, OUVE UM ERRO NA INSERÇÃO DESSE SALARIO
		 POIS ELE É MENOR QUE O PISO MINÍMO')
		 ROLLBACK TRANSACTION  --CTRL+Z, NÃO SALVANDO SEU INSERTED OU UPDATE--
END
	  
	  IF(@ATUAL >= @MAX)
BEGIN
	  RAISERROR('SALARIO MAIOR DO QUE PERMITIDO',10,2)
		 ROLLBACK TRANSACTION
END

 9.

 DECLARE = DECLARAR VARIAVIES COM SELECT
 
 DECLARE

      @R INT,
	  @A INT

      SET @R = 2+2
	  SET @A = 2000-122

      SELECT SUM(@R + @A)AS RESULTADO

 GO

 =
 RESULTADO
-----------
1882

OU

 DECLARE 
        @R NUMERIC(10,2),
        @NUMERO1 NUMERIC(10,2),
        @NUMERO2  NUMERIC(10,2)

        SET @NUMERO1 = 99.00
        SET @NUMERO2 = 122.00
        SET @R = (AVG(@NUMERO1 + @NUMERO2) / 2)

        SELECT @R AS MÉDIA
GO

MÉDIA
-----------
110.50

--CRIANDO E SE CONECTANDO EM UM BANCO DE DADOS--

CREATE DATABASE PIZZAPLEX
GO
USE PIZZAPLEX
GO

--TABELAS DE REGISTRO DE CLIENTES--

CREATE TABLE CLIENTES(
           IDCLIENTE INT PRIMARY KEY IDENTITY, --IDENTITY = AUTO_INCREMENT--
		   NOME VARCHAR(40) NOT NULL
)
GO

CREATE TABLE ENDERECO(
           IDENDERECO INT PRIMARY KEY IDENTITY(100,10), --INCREMENTE ID DE NUMERO 100 AUMENTANDO DE 10 EM CADA--
		   RUA VARCHAR(30) NOT NULL,
		   BAIRRO VARCHAR(30) NOT NULL,
		   CIDADE VARCHAR(20) NOT NULL,
		   ESTADO CHAR(2) NOT NULL
	 CHECK(ESTADO IN('SP','RJ','MG','ETC')), --NÃO EXISTE ENUM EM SQL SERVER PODENDO SER USADO O CHECK COMO ENUM--
		   ID_CLIENTE INT UNIQUE
)
GO

CREATE TABLE CONTATO(
           IDTELEFONE INT PRIMARY KEY IDENTITY,
		   TIPO CHAR(3) NOT NULL
		 CHECK(TIPO IN('CEL','COM','RES')),
		   NUMERO INT NOT NULL,
		   ID_CLIENTE INT
)
GO

--CONSTRAINTS E REGRAS--

ALTER TABLE CONTATO
ADD CONSTRAINT FK_CONTATO_CLIENTES
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTES(IDCLIENTE)
GO

ALTER TABLE ENDERECO
ADD CONSTRAINT FK_ENDERECO_CLIENTES
FOREIGN KEY(ID_CLIENTE)
REFERENCES CLIENTES(IDCLIENTE)
GO

--TABELA DE PEDIDOS--

CREATE TABLE CARDAPIO(
            IDCARDAPIO INT,
			ITENS VARCHAR(40) NOT NULL,
			PRECO_UNITARIO NUMERIC(10,2) NOT NULL --NUMERIC = FLOAT--
)
GO

--DADOS--

INSERT INTO CLIENTES VALUES('Joao')--NÃO NECESSITA DE NULL PARA A COLUNA ID(SENDO BEM MELHOR)--
GO
INSERT INTO CLIENTES VALUES('Rhuan')
GO
INSERT INTO CLIENTES VALUES('Ailton')
GO
INSERT INTO CLIENTES VALUES('Renato')
GO
INSERT INTO CLIENTES VALUES('Luís')
GO

INSERT INTO ENDERECO VALUES('Rua dos Anjos 12','Moema','São Paulo','SP',5)
GO
INSERT INTO ENDERECO VALUES('Rua dos Passáros','Grajáu','São Paulo','SP',1)
GO
INSERT INTO ENDERECO VALUES('Rua Secundaria','Centro','São Paulo','SP',3)
GO
INSERT INTO ENDERECO VALUES('Rua Principal','Centro','São Paulo','SP',4)
GO
INSERT INTO ENDERECO VALUES('Rua 15','Moema','São Paulo','SP',2)
GO

INSERT INTO CONTATO VALUES('CEL',945287782,5)
GO
INSERT INTO CONTATO VALUES('RES',59317408,4)
GO
INSERT INTO CONTATO VALUES('CEL',977442155,1)
GO
INSERT INTO CONTATO VALUES('COM',966335884,2)
GO
INSERT INTO CONTATO VALUES('CEL',977411747,3)
GO
INSERT INTO CONTATO VALUES('RES',59784128,5)
GO
INSERT INTO CONTATO VALUES('COM',945782127,4)
GO

SELECT * FROM CLIENTES
GO
SELECT * FROM ENDERECO
GO
SELECT * FROM CONTATO
GO

--RESUMO DE CLIENTE COM JOINS--

SELECT C.NOME, E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, T.TIPO, T.NUMERO
FROM CLIENTES C
INNER JOIN ENDERECO E
ON E.ID_CLIENTE = C.IDCLIENTE
INNER JOIN CONTATO T
ON T.ID_CLIENTE = C.IDCLIENTE
GO

--DADOS DOS ITENS DE PEDIDOS--

INSERT INTO CARDAPIO VALUES(10,'PIZZA DE CALABRESA',25.00)
GO
INSERT INTO CARDAPIO VALUES(11,'PIZZA DE GRANOLA',27.90)
GO
INSERT INTO CARDAPIO VALUES(12,'PIZZA DE MUSSARELA',25.00)
GO
INSERT INTO CARDAPIO VALUES(13,'PIZZA DE CHOCOLATE',36.40)
GO
INSERT INTO CARDAPIO VALUES(14,'PIZZA DE QUATRO-QUEIJOS',30.00)
GO
INSERT INTO CARDAPIO VALUES(15,'PIZZA DE QUEBRA-QUARTEIRAO',40.00)
GO
INSERT INTO CARDAPIO VALUES(16,'PIZZA DE CATUPIRI',33.50)
GO
INSERT INTO CARDAPIO VALUES(17,'PIZZA DE NAPOLITANA',28.00)
GO
INSERT INTO CARDAPIO VALUES(18,'PIZZA DE PORTUGUESA',29.99)
GO
INSERT INTO CARDAPIO VALUES(1,'COCA-COLA 2L',12.00)
GO
INSERT INTO CARDAPIO VALUES(2,'GUARANA',10.00)
GO
INSERT INTO CARDAPIO VALUES(3,'CERVEJA BUNIP 1L + REFIL 30M',27.90)
GO

SELECT * FROM CARDAPIO
GO

--PROCEDIMENTO DE COMPRA--

CREATE PROCEDURE CRIAR_PEDIDO(
				@PEDIDO INT,
				@QUANTIDADE INT,
				@ACOMPANHAMENTO INT)
AS
         SELECT 'TOTAL DOS ITENS' AS RESUMO, 
		 SUM(C.PRECO_UNITARIO * @QUANTIDADE) AS TOTAL
         FROM CARDAPIO C
         WHERE C.IDCARDAPIO IN (@PEDIDO,@ACOMPANHAMENTO)
GO

--COMPRA--

EXECUTE CRIAR_PEDIDO 10,2,NULL
GO


